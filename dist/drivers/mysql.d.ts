import { BaseFunction } from 'estree';
import { Column } from '../columns';
import { ConnectionOptions, Identifier } from '../common';
import { Database } from '../databases';
import { Driver } from '../drivers';
import { Key } from '../keys';
import { Query } from '../queries';
import { Table } from '../tables';
export declare class MySqlDriver implements Driver {
    private readonly options;
    private connection;
    private sqlBuilder;
    private inTransaction;
    private fkUpdateRuleMap;
    constructor(options: ConnectionOptions);
    disconnect(): Promise<void>;
    hasDatabase(name: Identifier): Promise<boolean>;
    getDatabase(name: Identifier): Promise<Database>;
    getDatabases(): Promise<Database[]>;
    createDatabase(database: Database): Promise<Database>;
    updateDatabase(database: Database): Promise<Database>;
    removeDatabase(name: string): Promise<void>;
    hasTable(databaseName: string, name: string): Promise<boolean>;
    getTable(databaseName: string, name: string): Promise<Table>;
    getTables(databaseName: string): Promise<Table[]>;
    createTable(databaseName: string, table: Table): Promise<Table>;
    updateTable(databaseName: string, table: Table): Promise<Table>;
    removeTable(databaseName: string, name: string): Promise<void>;
    getKey(databaseName: string, tableName: string, name: string): Promise<Key>;
    hasKey(databaseName: string, tableName: string, name: string): Promise<boolean>;
    getKeys(databaseName: string, tableName: string): Promise<Key[]>;
    loadKeys(databaseName: Identifier, tableName: Identifier, name?: Identifier): Promise<Key[]>;
    hasColumn(databaseName: string, tableName: string, name: string): Promise<boolean>;
    getColumn<T = any>(databaseName: string, tableName: string, name: string): Promise<Column<T>>;
    getColumns<T = any>(databaseName: string, tableName: string): Promise<Array<Column<T>>>;
    insert<T = {}>(databaseName: string, tableName: string, row: T): Promise<number | string>;
    insertMultiple<T = {}>(databaseName: string, tableName: string, rows: T[]): Promise<Array<number | string>>;
    select<T = {}, M = T>(databaseName: Identifier, tableName: Identifier, query: Query, selector?: BaseFunction): Promise<M[]>;
    stream<T = {}, M = T>(databaseName: Identifier, tableName: Identifier, query: Query<T>, selector?: BaseFunction): AsyncIterator<M>;
    update<T = {}>(databaseName: string, tableName: string, values: T, query: Query<T>): Promise<void>;
    delete<T = {}>(databaseName: string, tableName: string, query: Query<T>): Promise<void>;
    transact(transactor: (driver: this) => Promise<void>): Promise<void>;
    private getConnection;
    private getSqlBuilder;
    private query;
}
